#include "ServerSocket.h"

#include <cassert>
#include <iostream>
#include <string>
#include <tuple>

#include "SucInternals.h"
#include "ClientSocket.h"



suc::ServerSocket::ServerSocket(int port, int family)
{
	bind(port, family);
}


suc::ServerSocket::~ServerSocket()
{
	close();
}


void suc::ServerSocket::bind(int port, int family)
{
	if (!(family == SUC_IPV4 || family == SUC_IPV6)) {
		throw SucInvalidValueException("Invalid family: " + std::to_string(family));
	}

	addrinfo* ptr = sucTranslateAddress("0.0.0.0", port, family, SOCK_STREAM, IPPROTO_TCP, AI_PASSIVE);
	int iResult = 0;

	// Try to bind to any of the returned connections
	for (; ptr != nullptr; ptr = ptr->ai_next)
	{
		socket = winsock_socket(ptr->ai_family, ptr->ai_socktype, ptr->ai_protocol);
		if (socket == INVALID_SOCKET)
		{
			// Do nothing, just try the next address
			continue;
		}

		_isClosed = false;
		iResult = winsock_bind(socket, ptr->ai_addr, static_cast<int>(ptr->ai_addrlen));
		if (iResult == SOCKET_ERROR) {
			sucHandleErrorCode(WSAGetLastError());
		}

		address = ptr;
		break;
	}
	if (socket == INVALID_SOCKET) {// No valid address was generated by sucTranslateAddress()
		sucHandleErrorCode(WSAGetLastError());
	}

	// Listen
	iResult = winsock_listen(socket, SOMAXCONN);
	if (iResult == SOCKET_ERROR) {
		throw SucSocketException("Error in ServerSocket::bind() when trying to listen. ["
			+ std::to_string(WSAGetLastError()) + "]");
	}
}


std::unique_ptr<suc::ClientSocket> suc::ServerSocket::accept() const
{
	SOCKET s = winsock_accept(socket, nullptr, nullptr);

	if (s == INVALID_SOCKET)
	{
		sucHandleErrorCode(WSAGetLastError());
	}


	// Create ClientSocket
	auto newClient = std::make_unique<ClientSocket>(s);
	return newClient;
}


void suc::ServerSocket::close()
{
	if (_isClosed) { return; }

	int iResult = closesocket(socket);
	if (iResult == WSAENOTSOCK) {
		// This means that the socket does not exist anymore.
		// This is the purpose of this method anyway, so do nothing.
	}
	else if (iResult == SOCKET_ERROR) {
		sucHandleErrorCode(WSAGetLastError());
	}

	_isClosed = true;
}

bool suc::ServerSocket::isClosed() const noexcept
{
	return _isClosed;
}
